/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppStudyRouteImport } from './routes/app/study'
import { Route as AppSettingsRouteImport } from './routes/app/settings'
import { Route as AppDecksRouteImport } from './routes/app/decks'
import { Route as AppDashboardRouteImport } from './routes/app/dashboard'
import { Route as AppDecksDeckIdRouteImport } from './routes/app/decks_.$deckId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppStudyRoute = AppStudyRouteImport.update({
  id: '/study',
  path: '/study',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDecksRoute = AppDecksRouteImport.update({
  id: '/decks',
  path: '/decks',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDecksDeckIdRoute = AppDecksDeckIdRouteImport.update({
  id: '/decks_/$deckId',
  path: '/decks/$deckId',
  getParentRoute: () => AppRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/decks': typeof AppDecksRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/study': typeof AppStudyRoute
  '/app/': typeof AppIndexRoute
  '/app/decks/$deckId': typeof AppDecksDeckIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/decks': typeof AppDecksRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/study': typeof AppStudyRoute
  '/app': typeof AppIndexRoute
  '/app/decks/$deckId': typeof AppDecksDeckIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/decks': typeof AppDecksRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/study': typeof AppStudyRoute
  '/app/': typeof AppIndexRoute
  '/app/decks_/$deckId': typeof AppDecksDeckIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/signup'
    | '/app/dashboard'
    | '/app/decks'
    | '/app/settings'
    | '/app/study'
    | '/app/'
    | '/app/decks/$deckId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/app/dashboard'
    | '/app/decks'
    | '/app/settings'
    | '/app/study'
    | '/app'
    | '/app/decks/$deckId'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/signup'
    | '/app/dashboard'
    | '/app/decks'
    | '/app/settings'
    | '/app/study'
    | '/app/'
    | '/app/decks_/$deckId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/study': {
      id: '/app/study'
      path: '/study'
      fullPath: '/app/study'
      preLoaderRoute: typeof AppStudyRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/decks': {
      id: '/app/decks'
      path: '/decks'
      fullPath: '/app/decks'
      preLoaderRoute: typeof AppDecksRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/decks_/$deckId': {
      id: '/app/decks_/$deckId'
      path: '/decks/$deckId'
      fullPath: '/app/decks/$deckId'
      preLoaderRoute: typeof AppDecksDeckIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppDecksRoute: typeof AppDecksRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppStudyRoute: typeof AppStudyRoute
  AppIndexRoute: typeof AppIndexRoute
  AppDecksDeckIdRoute: typeof AppDecksDeckIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppDecksRoute: AppDecksRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppStudyRoute: AppStudyRoute,
  AppIndexRoute: AppIndexRoute,
  AppDecksDeckIdRoute: AppDecksDeckIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
