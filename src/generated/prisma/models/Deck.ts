
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Deck` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Deck
 * 
 */
export type DeckModel = runtime.Types.Result.DefaultSelection<Prisma.$DeckPayload>

export type AggregateDeck = {
  _count: DeckCountAggregateOutputType | null
  _min: DeckMinAggregateOutputType | null
  _max: DeckMaxAggregateOutputType | null
}

export type DeckMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  createdAt: Date | null
  content: string | null
  published: boolean | null
  authorId: string | null
}

export type DeckMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  createdAt: Date | null
  content: string | null
  published: boolean | null
  authorId: string | null
}

export type DeckCountAggregateOutputType = {
  id: number
  title: number
  description: number
  createdAt: number
  content: number
  published: number
  authorId: number
  _all: number
}


export type DeckMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  content?: true
  published?: true
  authorId?: true
}

export type DeckMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  content?: true
  published?: true
  authorId?: true
}

export type DeckCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  content?: true
  published?: true
  authorId?: true
  _all?: true
}

export type DeckAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deck to aggregate.
   */
  where?: Prisma.DeckWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Decks to fetch.
   */
  orderBy?: Prisma.DeckOrderByWithRelationInput | Prisma.DeckOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DeckWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Decks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Decks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Decks
  **/
  _count?: true | DeckCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DeckMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DeckMaxAggregateInputType
}

export type GetDeckAggregateType<T extends DeckAggregateArgs> = {
      [P in keyof T & keyof AggregateDeck]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeck[P]>
    : Prisma.GetScalarType<T[P], AggregateDeck[P]>
}




export type DeckGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DeckWhereInput
  orderBy?: Prisma.DeckOrderByWithAggregationInput | Prisma.DeckOrderByWithAggregationInput[]
  by: Prisma.DeckScalarFieldEnum[] | Prisma.DeckScalarFieldEnum
  having?: Prisma.DeckScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DeckCountAggregateInputType | true
  _min?: DeckMinAggregateInputType
  _max?: DeckMaxAggregateInputType
}

export type DeckGroupByOutputType = {
  id: string
  title: string
  description: string | null
  createdAt: Date
  content: string | null
  published: boolean
  authorId: string
  _count: DeckCountAggregateOutputType | null
  _min: DeckMinAggregateOutputType | null
  _max: DeckMaxAggregateOutputType | null
}

type GetDeckGroupByPayload<T extends DeckGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DeckGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DeckGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DeckGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DeckGroupByOutputType[P]>
      }
    >
  >



export type DeckWhereInput = {
  AND?: Prisma.DeckWhereInput | Prisma.DeckWhereInput[]
  OR?: Prisma.DeckWhereInput[]
  NOT?: Prisma.DeckWhereInput | Prisma.DeckWhereInput[]
  id?: Prisma.StringFilter<"Deck"> | string
  title?: Prisma.StringFilter<"Deck"> | string
  description?: Prisma.StringNullableFilter<"Deck"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deck"> | Date | string
  content?: Prisma.StringNullableFilter<"Deck"> | string | null
  published?: Prisma.BoolFilter<"Deck"> | boolean
  authorId?: Prisma.StringFilter<"Deck"> | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type DeckOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  published?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  author?: Prisma.UserOrderByWithRelationInput
}

export type DeckWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DeckWhereInput | Prisma.DeckWhereInput[]
  OR?: Prisma.DeckWhereInput[]
  NOT?: Prisma.DeckWhereInput | Prisma.DeckWhereInput[]
  title?: Prisma.StringFilter<"Deck"> | string
  description?: Prisma.StringNullableFilter<"Deck"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deck"> | Date | string
  content?: Prisma.StringNullableFilter<"Deck"> | string | null
  published?: Prisma.BoolFilter<"Deck"> | boolean
  authorId?: Prisma.StringFilter<"Deck"> | string
  author?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type DeckOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  published?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  _count?: Prisma.DeckCountOrderByAggregateInput
  _max?: Prisma.DeckMaxOrderByAggregateInput
  _min?: Prisma.DeckMinOrderByAggregateInput
}

export type DeckScalarWhereWithAggregatesInput = {
  AND?: Prisma.DeckScalarWhereWithAggregatesInput | Prisma.DeckScalarWhereWithAggregatesInput[]
  OR?: Prisma.DeckScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DeckScalarWhereWithAggregatesInput | Prisma.DeckScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Deck"> | string
  title?: Prisma.StringWithAggregatesFilter<"Deck"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Deck"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Deck"> | Date | string
  content?: Prisma.StringNullableWithAggregatesFilter<"Deck"> | string | null
  published?: Prisma.BoolWithAggregatesFilter<"Deck"> | boolean
  authorId?: Prisma.StringWithAggregatesFilter<"Deck"> | string
}

export type DeckCreateInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
  author: Prisma.UserCreateNestedOneWithoutDecksInput
}

export type DeckUncheckedCreateInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
  authorId: string
}

export type DeckUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  author?: Prisma.UserUpdateOneRequiredWithoutDecksNestedInput
}

export type DeckUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeckCreateManyInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
  authorId: string
}

export type DeckUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DeckUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  authorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DeckCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  published?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type DeckMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  published?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type DeckMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  content?: Prisma.SortOrder
  published?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type DeckListRelationFilter = {
  every?: Prisma.DeckWhereInput
  some?: Prisma.DeckWhereInput
  none?: Prisma.DeckWhereInput
}

export type DeckOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DeckCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput> | Prisma.DeckCreateWithoutAuthorInput[] | Prisma.DeckUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.DeckCreateOrConnectWithoutAuthorInput | Prisma.DeckCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.DeckCreateManyAuthorInputEnvelope
  connect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
}

export type DeckUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput> | Prisma.DeckCreateWithoutAuthorInput[] | Prisma.DeckUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.DeckCreateOrConnectWithoutAuthorInput | Prisma.DeckCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.DeckCreateManyAuthorInputEnvelope
  connect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
}

export type DeckUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput> | Prisma.DeckCreateWithoutAuthorInput[] | Prisma.DeckUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.DeckCreateOrConnectWithoutAuthorInput | Prisma.DeckCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.DeckUpsertWithWhereUniqueWithoutAuthorInput | Prisma.DeckUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.DeckCreateManyAuthorInputEnvelope
  set?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  disconnect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  delete?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  connect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  update?: Prisma.DeckUpdateWithWhereUniqueWithoutAuthorInput | Prisma.DeckUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.DeckUpdateManyWithWhereWithoutAuthorInput | Prisma.DeckUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.DeckScalarWhereInput | Prisma.DeckScalarWhereInput[]
}

export type DeckUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput> | Prisma.DeckCreateWithoutAuthorInput[] | Prisma.DeckUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.DeckCreateOrConnectWithoutAuthorInput | Prisma.DeckCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.DeckUpsertWithWhereUniqueWithoutAuthorInput | Prisma.DeckUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.DeckCreateManyAuthorInputEnvelope
  set?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  disconnect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  delete?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  connect?: Prisma.DeckWhereUniqueInput | Prisma.DeckWhereUniqueInput[]
  update?: Prisma.DeckUpdateWithWhereUniqueWithoutAuthorInput | Prisma.DeckUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.DeckUpdateManyWithWhereWithoutAuthorInput | Prisma.DeckUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.DeckScalarWhereInput | Prisma.DeckScalarWhereInput[]
}

export type DeckCreateWithoutAuthorInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
}

export type DeckUncheckedCreateWithoutAuthorInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
}

export type DeckCreateOrConnectWithoutAuthorInput = {
  where: Prisma.DeckWhereUniqueInput
  create: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput>
}

export type DeckCreateManyAuthorInputEnvelope = {
  data: Prisma.DeckCreateManyAuthorInput | Prisma.DeckCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type DeckUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.DeckWhereUniqueInput
  update: Prisma.XOR<Prisma.DeckUpdateWithoutAuthorInput, Prisma.DeckUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.DeckCreateWithoutAuthorInput, Prisma.DeckUncheckedCreateWithoutAuthorInput>
}

export type DeckUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.DeckWhereUniqueInput
  data: Prisma.XOR<Prisma.DeckUpdateWithoutAuthorInput, Prisma.DeckUncheckedUpdateWithoutAuthorInput>
}

export type DeckUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.DeckScalarWhereInput
  data: Prisma.XOR<Prisma.DeckUpdateManyMutationInput, Prisma.DeckUncheckedUpdateManyWithoutAuthorInput>
}

export type DeckScalarWhereInput = {
  AND?: Prisma.DeckScalarWhereInput | Prisma.DeckScalarWhereInput[]
  OR?: Prisma.DeckScalarWhereInput[]
  NOT?: Prisma.DeckScalarWhereInput | Prisma.DeckScalarWhereInput[]
  id?: Prisma.StringFilter<"Deck"> | string
  title?: Prisma.StringFilter<"Deck"> | string
  description?: Prisma.StringNullableFilter<"Deck"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deck"> | Date | string
  content?: Prisma.StringNullableFilter<"Deck"> | string | null
  published?: Prisma.BoolFilter<"Deck"> | boolean
  authorId?: Prisma.StringFilter<"Deck"> | string
}

export type DeckCreateManyAuthorInput = {
  id?: string
  title?: string
  description?: string | null
  createdAt?: Date | string
  content?: string | null
  published?: boolean
}

export type DeckUpdateWithoutAuthorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DeckUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type DeckUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type DeckSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  content?: boolean
  published?: boolean
  authorId?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deck"]>

export type DeckSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  content?: boolean
  published?: boolean
  authorId?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deck"]>

export type DeckSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  content?: boolean
  published?: boolean
  authorId?: boolean
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deck"]>

export type DeckSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  content?: boolean
  published?: boolean
  authorId?: boolean
}

export type DeckOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "createdAt" | "content" | "published" | "authorId", ExtArgs["result"]["deck"]>
export type DeckInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DeckIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DeckIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DeckPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Deck"
  objects: {
    author: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    createdAt: Date
    content: string | null
    published: boolean
    authorId: string
  }, ExtArgs["result"]["deck"]>
  composites: {}
}

export type DeckGetPayload<S extends boolean | null | undefined | DeckDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DeckPayload, S>

export type DeckCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DeckFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DeckCountAggregateInputType | true
  }

export interface DeckDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deck'], meta: { name: 'Deck' } }
  /**
   * Find zero or one Deck that matches the filter.
   * @param {DeckFindUniqueArgs} args - Arguments to find a Deck
   * @example
   * // Get one Deck
   * const deck = await prisma.deck.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DeckFindUniqueArgs>(args: Prisma.SelectSubset<T, DeckFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Deck that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DeckFindUniqueOrThrowArgs} args - Arguments to find a Deck
   * @example
   * // Get one Deck
   * const deck = await prisma.deck.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DeckFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DeckFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deck that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckFindFirstArgs} args - Arguments to find a Deck
   * @example
   * // Get one Deck
   * const deck = await prisma.deck.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DeckFindFirstArgs>(args?: Prisma.SelectSubset<T, DeckFindFirstArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deck that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckFindFirstOrThrowArgs} args - Arguments to find a Deck
   * @example
   * // Get one Deck
   * const deck = await prisma.deck.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DeckFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DeckFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Decks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Decks
   * const decks = await prisma.deck.findMany()
   * 
   * // Get first 10 Decks
   * const decks = await prisma.deck.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const deckWithIdOnly = await prisma.deck.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DeckFindManyArgs>(args?: Prisma.SelectSubset<T, DeckFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Deck.
   * @param {DeckCreateArgs} args - Arguments to create a Deck.
   * @example
   * // Create one Deck
   * const Deck = await prisma.deck.create({
   *   data: {
   *     // ... data to create a Deck
   *   }
   * })
   * 
   */
  create<T extends DeckCreateArgs>(args: Prisma.SelectSubset<T, DeckCreateArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Decks.
   * @param {DeckCreateManyArgs} args - Arguments to create many Decks.
   * @example
   * // Create many Decks
   * const deck = await prisma.deck.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DeckCreateManyArgs>(args?: Prisma.SelectSubset<T, DeckCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Decks and returns the data saved in the database.
   * @param {DeckCreateManyAndReturnArgs} args - Arguments to create many Decks.
   * @example
   * // Create many Decks
   * const deck = await prisma.deck.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Decks and only return the `id`
   * const deckWithIdOnly = await prisma.deck.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DeckCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DeckCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Deck.
   * @param {DeckDeleteArgs} args - Arguments to delete one Deck.
   * @example
   * // Delete one Deck
   * const Deck = await prisma.deck.delete({
   *   where: {
   *     // ... filter to delete one Deck
   *   }
   * })
   * 
   */
  delete<T extends DeckDeleteArgs>(args: Prisma.SelectSubset<T, DeckDeleteArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Deck.
   * @param {DeckUpdateArgs} args - Arguments to update one Deck.
   * @example
   * // Update one Deck
   * const deck = await prisma.deck.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DeckUpdateArgs>(args: Prisma.SelectSubset<T, DeckUpdateArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Decks.
   * @param {DeckDeleteManyArgs} args - Arguments to filter Decks to delete.
   * @example
   * // Delete a few Decks
   * const { count } = await prisma.deck.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DeckDeleteManyArgs>(args?: Prisma.SelectSubset<T, DeckDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Decks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Decks
   * const deck = await prisma.deck.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DeckUpdateManyArgs>(args: Prisma.SelectSubset<T, DeckUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Decks and returns the data updated in the database.
   * @param {DeckUpdateManyAndReturnArgs} args - Arguments to update many Decks.
   * @example
   * // Update many Decks
   * const deck = await prisma.deck.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Decks and only return the `id`
   * const deckWithIdOnly = await prisma.deck.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DeckUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DeckUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Deck.
   * @param {DeckUpsertArgs} args - Arguments to update or create a Deck.
   * @example
   * // Update or create a Deck
   * const deck = await prisma.deck.upsert({
   *   create: {
   *     // ... data to create a Deck
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Deck we want to update
   *   }
   * })
   */
  upsert<T extends DeckUpsertArgs>(args: Prisma.SelectSubset<T, DeckUpsertArgs<ExtArgs>>): Prisma.Prisma__DeckClient<runtime.Types.Result.GetResult<Prisma.$DeckPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Decks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckCountArgs} args - Arguments to filter Decks to count.
   * @example
   * // Count the number of Decks
   * const count = await prisma.deck.count({
   *   where: {
   *     // ... the filter for the Decks we want to count
   *   }
   * })
  **/
  count<T extends DeckCountArgs>(
    args?: Prisma.Subset<T, DeckCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DeckCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Deck.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DeckAggregateArgs>(args: Prisma.Subset<T, DeckAggregateArgs>): Prisma.PrismaPromise<GetDeckAggregateType<T>>

  /**
   * Group by Deck.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeckGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DeckGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DeckGroupByArgs['orderBy'] }
      : { orderBy?: DeckGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DeckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Deck model
 */
readonly fields: DeckFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Deck.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DeckClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  author<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Deck model
 */
export interface DeckFieldRefs {
  readonly id: Prisma.FieldRef<"Deck", 'String'>
  readonly title: Prisma.FieldRef<"Deck", 'String'>
  readonly description: Prisma.FieldRef<"Deck", 'String'>
  readonly createdAt: Prisma.FieldRef<"Deck", 'DateTime'>
  readonly content: Prisma.FieldRef<"Deck", 'String'>
  readonly published: Prisma.FieldRef<"Deck", 'Boolean'>
  readonly authorId: Prisma.FieldRef<"Deck", 'String'>
}
    

// Custom InputTypes
/**
 * Deck findUnique
 */
export type DeckFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter, which Deck to fetch.
   */
  where: Prisma.DeckWhereUniqueInput
}

/**
 * Deck findUniqueOrThrow
 */
export type DeckFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter, which Deck to fetch.
   */
  where: Prisma.DeckWhereUniqueInput
}

/**
 * Deck findFirst
 */
export type DeckFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter, which Deck to fetch.
   */
  where?: Prisma.DeckWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Decks to fetch.
   */
  orderBy?: Prisma.DeckOrderByWithRelationInput | Prisma.DeckOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Decks.
   */
  cursor?: Prisma.DeckWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Decks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Decks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Decks.
   */
  distinct?: Prisma.DeckScalarFieldEnum | Prisma.DeckScalarFieldEnum[]
}

/**
 * Deck findFirstOrThrow
 */
export type DeckFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter, which Deck to fetch.
   */
  where?: Prisma.DeckWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Decks to fetch.
   */
  orderBy?: Prisma.DeckOrderByWithRelationInput | Prisma.DeckOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Decks.
   */
  cursor?: Prisma.DeckWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Decks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Decks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Decks.
   */
  distinct?: Prisma.DeckScalarFieldEnum | Prisma.DeckScalarFieldEnum[]
}

/**
 * Deck findMany
 */
export type DeckFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter, which Decks to fetch.
   */
  where?: Prisma.DeckWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Decks to fetch.
   */
  orderBy?: Prisma.DeckOrderByWithRelationInput | Prisma.DeckOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Decks.
   */
  cursor?: Prisma.DeckWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Decks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Decks.
   */
  skip?: number
  distinct?: Prisma.DeckScalarFieldEnum | Prisma.DeckScalarFieldEnum[]
}

/**
 * Deck create
 */
export type DeckCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * The data needed to create a Deck.
   */
  data: Prisma.XOR<Prisma.DeckCreateInput, Prisma.DeckUncheckedCreateInput>
}

/**
 * Deck createMany
 */
export type DeckCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Decks.
   */
  data: Prisma.DeckCreateManyInput | Prisma.DeckCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Deck createManyAndReturn
 */
export type DeckCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * The data used to create many Decks.
   */
  data: Prisma.DeckCreateManyInput | Prisma.DeckCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Deck update
 */
export type DeckUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * The data needed to update a Deck.
   */
  data: Prisma.XOR<Prisma.DeckUpdateInput, Prisma.DeckUncheckedUpdateInput>
  /**
   * Choose, which Deck to update.
   */
  where: Prisma.DeckWhereUniqueInput
}

/**
 * Deck updateMany
 */
export type DeckUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Decks.
   */
  data: Prisma.XOR<Prisma.DeckUpdateManyMutationInput, Prisma.DeckUncheckedUpdateManyInput>
  /**
   * Filter which Decks to update
   */
  where?: Prisma.DeckWhereInput
  /**
   * Limit how many Decks to update.
   */
  limit?: number
}

/**
 * Deck updateManyAndReturn
 */
export type DeckUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * The data used to update Decks.
   */
  data: Prisma.XOR<Prisma.DeckUpdateManyMutationInput, Prisma.DeckUncheckedUpdateManyInput>
  /**
   * Filter which Decks to update
   */
  where?: Prisma.DeckWhereInput
  /**
   * Limit how many Decks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Deck upsert
 */
export type DeckUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * The filter to search for the Deck to update in case it exists.
   */
  where: Prisma.DeckWhereUniqueInput
  /**
   * In case the Deck found by the `where` argument doesn't exist, create a new Deck with this data.
   */
  create: Prisma.XOR<Prisma.DeckCreateInput, Prisma.DeckUncheckedCreateInput>
  /**
   * In case the Deck was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DeckUpdateInput, Prisma.DeckUncheckedUpdateInput>
}

/**
 * Deck delete
 */
export type DeckDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
  /**
   * Filter which Deck to delete.
   */
  where: Prisma.DeckWhereUniqueInput
}

/**
 * Deck deleteMany
 */
export type DeckDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Decks to delete
   */
  where?: Prisma.DeckWhereInput
  /**
   * Limit how many Decks to delete.
   */
  limit?: number
}

/**
 * Deck without action
 */
export type DeckDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deck
   */
  select?: Prisma.DeckSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deck
   */
  omit?: Prisma.DeckOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DeckInclude<ExtArgs> | null
}
